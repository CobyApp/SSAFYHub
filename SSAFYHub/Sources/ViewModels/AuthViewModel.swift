import Foundation
import SwiftUI
import Supabase
import AuthenticationServices

@MainActor
class AuthViewModel: ObservableObject {
    @Published var authState: AuthState = .loading
    @Published var isLoading = false
    @Published var errorMessage: String?
    @Published var isAppleSignInInProgress = false
    @Published var showError = false
    
    let supabaseService = SupabaseService.shared
    weak var coordinator: AppCoordinator?
    
    var currentUser: User? {
        if case .authenticated(let user) = authState {
            return user
        }
        return nil
    }
    
    init() {
        // initÏóêÏÑúÎäî ÏÑ∏ÏÖò Ï≤¥ÌÅ¨ÌïòÏßÄ ÏïäÏùå
        // SSAFYHubAppÏóêÏÑú checkInitialAuthState()Î•º ÌÜµÌï¥ Ï≤òÎ¶¨
    }
    
    // MARK: - Coordinator Setup
    func setCoordinator(_ coordinator: AppCoordinator) {
        self.coordinator = coordinator
        print("üîó Coordinator Ïó∞Í≤∞Îê®")
    }
    
    // MARK: - Auth State Check
    @MainActor
    func checkAuthState() {
        Task {
            do {
                print("üîç AuthViewModel: ÏÑ∏ÏÖò ÏÉÅÌÉú ÌôïÏù∏ ÏãúÏûë")
                let session = try await supabaseService.client.auth.session
                let user = session.user
                print("üîç AuthViewModel: ÏÑ∏ÏÖò Î∞úÍ≤¨ - ÏÇ¨Ïö©Ïûê ID: \(user.id)")
                
                let userData = try await fetchUserData(userId: user.id.uuidString)
                print("üîç AuthViewModel: ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å - \(userData.email)")
                
                authState = .authenticated(userData)
                print("‚úÖ AuthViewModel: Ïù∏Ï¶ù ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")
            } catch {
                print("‚ùå AuthViewModel: ÏÑ∏ÏÖò ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: \(error)")
                authState = .unauthenticated
            }
        }
    }
    
    func signInWithApple() async {
        isLoading = true
        errorMessage = nil
        
        do {
            let identityToken = try await AppleSignInService.shared.signInWithApple()
            print("üçé Apple Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ, Identity Token ÌöçÎìù")
            
            // Supabase Ïù∏Ï¶ù
            let user = try await supabaseService.authenticateWithApple(identityToken: identityToken)
            print("üîê Supabase Ïù∏Ï¶ù ÏÑ±Í≥µ: \(user.email)")
            
            authState = .authenticated(user)
        } catch {
            print("‚ùå Apple Î°úÍ∑∏Ïù∏ Ïã§Ìå®: \(error)")
            errorMessage = "Apple Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: \(error.localizedDescription)"
            authState = .unauthenticated
        }
        
        isLoading = false
    }
    
    func signOut() async {
        isLoading = true
        errorMessage = nil
        
        do {
            try await supabaseService.signOut()
            authState = .unauthenticated
        } catch {
            errorMessage = "Î°úÍ∑∏ÏïÑÏõÉÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: \(error.localizedDescription)"
        }
        
        isLoading = false
    }
    
    // Í≤åÏä§Ìä∏ Î™®Îìú ÎÇòÍ∞ÄÍ∏∞ (Î≥ÑÎèÑ Ìï®Ïàò)
    func exitGuestMode() {
        print("üë§ Í≤åÏä§Ìä∏ Î™®Îìú ÎÇòÍ∞ÄÍ∏∞")
        authState = .unauthenticated
    }
    
    // ÌöåÏõêÌÉàÌá¥
    func deleteAccount() async {
        isLoading = true
        errorMessage = nil
        
        do {
            try await supabaseService.deleteAccount()
            authState = .unauthenticated
            print("‚úÖ ÌöåÏõêÌÉàÌá¥ ÏôÑÎ£å")
        } catch {
            errorMessage = "ÌöåÏõêÌÉàÌá¥Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: \(error.localizedDescription)"
            print("‚ùå ÌöåÏõêÌÉàÌá¥ Ïã§Ìå®: \(error)")
        }
        
        isLoading = false
    }
    
    func updateUserCampus(_ campus: Campus) async {
        isLoading = true
        errorMessage = nil
        
        do {
            if case .authenticated(let user) = authState {
                try await supabaseService.updateUserCampus(userId: user.id, campus: campus)
                
                let updatedUser = User(
                    id: user.id,
                    email: user.email,
                    campus: campus,
                    userType: user.userType,  // userType Ïú†ÏßÄ
                    createdAt: user.createdAt,
                    updatedAt: Date()
                )
                authState = .authenticated(updatedUser)
            }
        } catch {
            errorMessage = "Ï∫†ÌçºÏä§ ÏóÖÎç∞Ïù¥Ìä∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: \(error.localizedDescription)"
        }
        
        isLoading = false
    }
    
    func signInAsGuest(campus: Campus) async {
        print("üë§ signInAsGuest ÏãúÏûë - Ï∫†ÌçºÏä§: \(campus.displayName)")
        isLoading = true
        errorMessage = nil
        
        do {
            // 1. SupabaseServiceÎ•º ÌÜµÌï¥ Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±
            let guestUser = try await supabaseService.signInAsGuest(campus: campus)
            
            print("üë§ Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±Îê®: \(guestUser)")
            print("üîÑ authState ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë")
            
            // 2. authState ÏóÖÎç∞Ïù¥Ìä∏
            await MainActor.run {
                let oldState = authState
                authState = .authenticated(guestUser)
                print("‚úÖ authState ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")
                print("üì± Ïù¥Ï†Ñ ÏÉÅÌÉú: \(oldState)")
                print("üì± ÏÉàÎ°úÏö¥ ÏÉÅÌÉú: \(authState)")
            }
            
            print("‚úÖ signInAsGuest ÏôÑÎ£å")
        } catch {
            print("‚ùå signInAsGuest Ïò§Î•ò: \(error)")
            errorMessage = "Í≤åÏä§Ìä∏ Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: \(error.localizedDescription)"
            
            // ÏóêÎü¨ Î∞úÏÉù Ïãú Ïù∏Ï¶ù ÏÉÅÌÉúÎ•º unauthenticatedÎ°ú ÏÑ§Ï†ï
            await MainActor.run {
                authState = .unauthenticated
            }
        }
        
        isLoading = false
        print("üèÅ signInAsGuest Ï¢ÖÎ£å")
    }
    
    // MARK: - Apple Sign In with Navigation
    func signInWithAppleAndNavigate() async throws {
        guard !isAppleSignInInProgress else {
            print("‚ö†Ô∏è Apple Sign-InÏù¥ Ïù¥ÎØ∏ ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§")
            return
        }
        
        isAppleSignInInProgress = true
        errorMessage = nil
        showError = false
        
        do {
            print("üçé Apple Sign-In ÏãúÏûë")
            let identityToken = try await AppleSignInService.shared.signInWithApple()
            print("üçé Apple Sign-In ÏÑ±Í≥µ, Identity Token ÌöçÎìù")
            
            // Supabase Ïù∏Ï¶ù
            let authenticatedUser = try await supabaseService.authenticateWithApple(identityToken: identityToken)
            print("üîê Supabase Ïù∏Ï¶ù ÏÑ±Í≥µ: \(authenticatedUser.email)")
            
            // Ïù∏Ï¶ù ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            authState = .authenticated(authenticatedUser)
            
            // CoordinatorÎ•º ÌÜµÌïú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
            coordinator?.handleDirectAuthentication(authenticatedUser)
            
            print("‚úÖ Apple Sign-In Î∞è ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏôÑÎ£å")
        } catch {
            print("‚ùå Apple Sign-In Ïã§Ìå®: \(error)")
            errorMessage = "Apple Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: \(error.localizedDescription)"
            showError = true
            authState = .unauthenticated
            throw error
        }
        
        isAppleSignInInProgress = false
    }
    
    public func fetchUserData(userId: String) async throws -> User {
        let response = try await supabaseService.client
            .database
            .from("users")
            .select()
            .eq("id", value: userId)
            .single()
            .execute()
        
        let data = response.data
        guard let jsonResult = try? JSONSerialization.jsonObject(with: data) as? [String: Any] else {
            throw NSError(domain: "SupabaseError", code: -1, userInfo: [NSLocalizedDescriptionKey: "Failed to parse user data"])
        }
        
        let email = jsonResult["email"] as? String ?? ""
        let campusId = jsonResult["campus_id"] as? String ?? "seoul"
        let campus = Campus(rawValue: campusId) ?? .seoul
        
        // user_type ÌïÑÎìú ÏùΩÍ∏∞ Ï∂îÍ∞Ä
        let userTypeString = jsonResult["user_type"] as? String ?? "authenticated"
        let userType = UserType(rawValue: userTypeString) ?? .authenticated
        
        let createdAt = ISO8601DateFormatter().date(from: jsonResult["created_at"] as? String ?? "") ?? Date()
        let updatedAt = ISO8601DateFormatter().date(from: jsonResult["updated_at"] as? String ?? "") ?? Date()
        
        return User(
            id: userId,
            email: email,
            campus: campus,
            userType: userType,  // userType Ï∂îÍ∞Ä
            createdAt: createdAt,
            updatedAt: updatedAt
        )
    }
}
